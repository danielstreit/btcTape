{
  "name": "pusher-client",
  "version": "0.2.2",
  "license": "MIT",
  "description": "Pusher client for node.js",
  "keywords": [
    "pusher",
    "websockets",
    "realtime",
    "push",
    "client"
  ],
  "author": {
    "name": "Dirk Bonhomme",
    "email": "dirk@bytelogic.be"
  },
  "contributors": [
    {
      "name": "Dirk Bonhomme",
      "email": "dirk@bytelogic.be"
    },
    {
      "name": "Paulius Uza",
      "email": "pauliusuza@gmail.com"
    }
  ],
  "main": "index",
  "repository": {
    "type": "git",
    "url": "git://github.com/dirkbonhomme/pusher-client-node"
  },
  "scripts": {
    "test": "make test"
  },
  "config": {
    "blanket": {
      "pattern": "//^(?!.*node_modules.*$).*lib//"
    }
  },
  "dependencies": {
    "underscore": "*",
    "ws": "*",
    "request": "*",
    "eventemitter2": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "sinon": "*",
    "blanket": "git://github.com/alex-seville/blanket.git#development"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# Pusher Node.js Client\n\nThis library is an open source client that allows Node.js applications to connect to the\n[Pusher webservice](http://pusherapp.com/). It aims to be fully compatible and up-to-date with Pusher's\nofficial [JavaScript client](https://github.com/pusher/pusher-js/)\n\nThe largest part of this documentation is a direct copy of the [Pusher JavaScript](https://github.com/pusher/pusher-js/blob/master/README.markdown)\nreadme with some specific changes.\n\n## Usage overview\n\nThe following topics are covered:\n\n* Configuration\n* Connection\n* Socket ids\n* Subscribing to channels (public and private)\n* Binding to events\n  * Globally\n  * Per-channel\n* Default events\n\n## Configuration\n\nThere are a number of configuration parameters which can be set for the Pusher client, which can be passed as an object to the Pusher constructor, i.e.:\n\n    var Pusher = require('pusher-client');\n    var pusher = new Pusher(API_KEY, {\n        authEndpoint: \"http://example.com/pusher/auth\"\n    });\n\nFor most users, there is little need to change these.\nSee [client API guide](http://pusher.com/docs/client_api_guide/client_connect) for more details.\n\n#### `encrypted` (Boolean)\n\nForces the connection to use encrypted transports.\n\n#### `secret` (String)\n\nContrary to the JavaScript client, this library is able to generate an authentication signature itself.\nWhen you provide the secret key (found under your app's access tokens on pusher.com) it will skip requests to the\nauthentication endpoint and locally sign subscribe requests to private- and presence channels.\n\n#### `channel_data` (Object)\n\nWhen using a secret with a presence- channel, you might want to also provide a channel_data object containing identifiable information about the client.\n\n    var pusher = new Pusher('app_key', {\n      secret: 'app_secret', \n      channel_data: {\n        user_id: 'unique_user_id', \n        user_info: {\n          name: 'User Name'\n        }\n      }\n    });\n\n#### `authEndpoint` (String)\n\nEndpoint on your server that will return the authentication signature needed for private channels.\n\n#### `auth` (Object)\n\nThe auth option lets you send additional information with the authentication request. Only used when `secret`\nis omitted.\n    \n`auth.params` (Object)\n\nAdditional POST parameters to be sent when the channel authentication endpoint is called. \n\n    var username = 'user123';\n    var password = 'password456';\n    var pusher = new Pusher('app_key', {\n      auth: {\n        params: {\n          username: username,\n          password: password\n        }\n      }\n    });\n\n`auth.headers` (Object)\n\nProvides the ability to pass additional HTTP Headers to the channel authentication endpoint when authenticating a channel.\n\n    var username = 'user123';\n    var password = 'password456';\n    var pusher = new Pusher('app_key', {\n      auth: {\n        headers: {\n          'Authorization': 'Basic ' + new Buffer(username + ':' + password).toString('base64')\n        }\n      }\n    });\n    \n`auth.username` and `auth.password` (String)\n\nWhen both username and password are provided, the correct authorization headers will be sent when authenticating a channel (HTTP Basic Authorization)\n\n#### `cluster` (String)\n\nAllows connecting to a different datacenter by setting up correct hostnames and ports for the connection.\n\n    // will connect to the 'eu' cluster\n    var pusher = new Pusher(API_KEY, { cluster: \"eu\" });\n\n#### `host`, `wsPort`, `wssPort`\n\nThese can be changed to point to alternative Pusher URLs (used internally for our staging server).\n\n\n## Connection\n\nA websocket connection is established by providing your API key to the constructor function:\n\n    var socket = new Pusher(API_KEY);\n\nThis returns a socket object which can then be used to subscribe to channels.\n\n### Socket IDs\n\nMaking a connection provides the client with a new `socket_id` that is assigned by the server.\nThis can be used to distinguish the client's own events. A change of state might otherwise be\nduplicated in the client. More information on this pattern is available\n[here](http://pusherapp.com/docs/duplicates).\n\nIt is also stored within the socket, and used as a token for generating signatures for private channels.\n\n## Subscribing to channels\n\n### Public channels\n\nThe default method for subscribing to a channel involves invoking the `subscribe` method of your socket object:\n\n    var my_channel = socket.subscribe('my-channel');\n\nThis returns a Channel object which events can be bound to.\n\n### Private channels\n\nPrivate channels are created in exactly the same way as normal channels, except that they reside in the 'private-' namespace. This means prefixing the channel name:\n\n    var my_channel = socket.subscribe('private-my-channel');\n\nIt is possible to access channels by name, through the `channel` function:\n\n    channel = socket.channel('private-my-channel');\n\n## Binding to events\n\nEvents can be bound to at 2 levels, the global, and per channel. They take a very similar form to the way events are handled in jQuery.\n\n### Global events\n\nYou can attach behaviour to these events regardless of the channel the event is broadcast to. The following is an example of an app that binds to new comments from any channel:\n\n    var socket = new Pusher('MY_API_KEY');\n    var my_channel = socket.subscribe('my-channel');\n    socket.bind('new-comment',\n      function(data) {\n        // add comment into page\n      }\n    );\n\n### Per-channel events\n\nThese are bound to a specific channel, and mean that you can reuse event names in different parts of you client application. The following might be an example of a stock tracking app where several channels are opened for different companies:\n\n    var socket = new Pusher('MY_API_KEY');\n    var channel = socket.subscribe('APPL');\n    channel.bind('new-price',\n      function(data) {\n        // add new price into the APPL widget\n      }\n    );\n\n### Binding to everything\n\nIt is possible to bind to all events at either the global or channel level by using the method `bind_all`.\nThis is used for debugging, but may have other utilities.\n\n### Getting all channels\n\nIt is possible to retrieve a list of all channels you subscribed to or are subscribing to:\n\n    var channels = socket.allChannels();\n\n## Default events\n\nThere are a number of events which are used internally, but can also be of use elsewhere:\n\n* connection_established\n* subscribe\n\n## Developing\n\nThe library is published to NPM and can be installed with the following command:\n\n    $ npm install pusher-client\n\n## Testing\n\nNavigate to this module's repository and make sure you have the development modules installed:\n\n    $ npm install\n\n\nRun the tests:\n\n    $ npm test\n\nAbout 70% of code has been covered so far. Most tests are a direct port of JavaScript tests. Use the [original Pusher tests](https://github.com/pusher/pusher-js/blob/master/README.markdown#testing) as a starting point.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dirkbonhomme/pusher-client-node/issues"
  },
  "homepage": "https://github.com/dirkbonhomme/pusher-client-node",
  "_id": "pusher-client@0.2.2",
  "_from": "pusher-client@"
}
